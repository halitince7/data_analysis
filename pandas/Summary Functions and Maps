{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1252,"sourceType":"datasetVersion","datasetId":655},{"sourceId":3919,"sourceType":"datasetVersion","datasetId":2321},{"sourceId":4877,"sourceType":"datasetVersion","datasetId":2894},{"sourceId":5624,"sourceType":"datasetVersion","datasetId":3491},{"sourceId":8172,"sourceType":"datasetVersion","datasetId":1442},{"sourceId":13206,"sourceType":"datasetVersion","datasetId":9366},{"sourceId":403916,"sourceType":"datasetVersion","datasetId":179555},{"sourceId":466349,"sourceType":"datasetVersion","datasetId":4549},{"sourceId":1151655,"sourceType":"datasetVersion","datasetId":2478},{"sourceId":5438389,"sourceType":"datasetVersion","datasetId":10128}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/exercise-summary-functions-and-maps-578c855d-7abe-4b3f-8502-f835de7aca69.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240217/auto/storage/goog4_request&X-Goog-Date=20240217T153615Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=9fcb397ee6c87139488ad3fe57fc2c0e9380f8265491247ec213107bf9f883ff2c01fc44d5d265eae798694806e3d3a3f069553011d2570d33d86ddb4e4a38cde3e00cd94b7fd449abd83ef50ebffbbfa50b8e19eaafea9038b8cdb5a9c1ce30c1469bafea55c4f6d9aef4415ba22ddc98b12800a993c712acf6d9bb1acb7452254e3d12f88260fcdc641b208bb2cefd3afbe9aadd2d242f162661dff5597d221083686db5bccfcc79d190339ad593deacf6173325f6a25498d0f383eeea5501e25b8335b16375fdd5e180bd58312b2e071ccfaf2089799a3dd399cd5920c559f97f77b1f864b1a24d2f64d7932ec6f8840e994f6f3c7de0bb5910327f3a6978","timestamp":1708184185148}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ieShYCYts6b","executionInfo":{"status":"ok","timestamp":1708184260227,"user_tz":-180,"elapsed":24625,"user":{"displayName":"Halit Ince","userId":"10018985644071223184"}},"outputId":"d87e56fc-048d-4971-e272-9cfb75da0229"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/github_repos/data_analysis/pandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y_8ozSG4tzk0","executionInfo":{"status":"ok","timestamp":1708184287415,"user_tz":-180,"elapsed":5,"user":{"displayName":"Halit Ince","userId":"10018985644071223184"}},"outputId":"0288b217-fb4c-40b7-9dd6-1272c0a5633a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/github_repos/data_analysis/pandas\n"]}]},{"cell_type":"markdown","source":["# Introduction\n","\n","Now you are ready to get a deeper understanding of your data.\n","\n","Run the following cell to load your data and some utility functions (including code to check your answers)."],"metadata":{"id":"ElgbrHEZtg4l"}},{"cell_type":"code","source":["import pandas as pd\n","pd.set_option(\"display.max_rows\", 5)\n","reviews = pd.read_csv(\"wine-reviews/winemag-data-130k-v2.csv\", index_col=0)\n","\n","reviews.head()"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:17:24.143585Z","iopub.execute_input":"2024-02-15T13:17:24.14401Z","iopub.status.idle":"2024-02-15T13:17:25.696697Z","shell.execute_reply.started":"2024-02-15T13:17:24.143977Z","shell.execute_reply":"2024-02-15T13:17:25.695291Z"},"trusted":true,"id":"wNveOoeatg4l","outputId":"f0e80967-80e9-4df4-e961-b3c6570a9ae4","colab":{"base_uri":"https://localhost:8080/","height":643},"executionInfo":{"status":"ok","timestamp":1708184302948,"user_tz":-180,"elapsed":3424,"user":{"displayName":"Halit Ince","userId":"10018985644071223184"}}},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    country                                        description  \\\n","0     Italy  Aromas include tropical fruit, broom, brimston...   \n","1  Portugal  This is ripe and fruity, a wine that is smooth...   \n","2        US  Tart and snappy, the flavors of lime flesh and...   \n","3        US  Pineapple rind, lemon pith and orange blossom ...   \n","4        US  Much like the regular bottling from 2012, this...   \n","\n","                          designation  points  price           province  \\\n","0                        Vulkà Bianco      87    NaN  Sicily & Sardinia   \n","1                            Avidagos      87   15.0              Douro   \n","2                                 NaN      87   14.0             Oregon   \n","3                Reserve Late Harvest      87   13.0           Michigan   \n","4  Vintner's Reserve Wild Child Block      87   65.0             Oregon   \n","\n","              region_1           region_2         taster_name  \\\n","0                 Etna                NaN       Kerin O’Keefe   \n","1                  NaN                NaN          Roger Voss   \n","2    Willamette Valley  Willamette Valley        Paul Gregutt   \n","3  Lake Michigan Shore                NaN  Alexander Peartree   \n","4    Willamette Valley  Willamette Valley        Paul Gregutt   \n","\n","  taster_twitter_handle                                              title  \\\n","0          @kerinokeefe                  Nicosia 2013 Vulkà Bianco  (Etna)   \n","1            @vossroger      Quinta dos Avidagos 2011 Avidagos Red (Douro)   \n","2           @paulgwine       Rainstorm 2013 Pinot Gris (Willamette Valley)   \n","3                   NaN  St. Julian 2013 Reserve Late Harvest Riesling ...   \n","4           @paulgwine   Sweet Cheeks 2012 Vintner's Reserve Wild Child...   \n","\n","          variety               winery  \n","0     White Blend              Nicosia  \n","1  Portuguese Red  Quinta dos Avidagos  \n","2      Pinot Gris            Rainstorm  \n","3        Riesling           St. Julian  \n","4      Pinot Noir         Sweet Cheeks  "],"text/html":["\n","  <div id=\"df-ca732c4c-5a53-4a12-917d-e1026fa82bea\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>country</th>\n","      <th>description</th>\n","      <th>designation</th>\n","      <th>points</th>\n","      <th>price</th>\n","      <th>province</th>\n","      <th>region_1</th>\n","      <th>region_2</th>\n","      <th>taster_name</th>\n","      <th>taster_twitter_handle</th>\n","      <th>title</th>\n","      <th>variety</th>\n","      <th>winery</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Italy</td>\n","      <td>Aromas include tropical fruit, broom, brimston...</td>\n","      <td>Vulkà Bianco</td>\n","      <td>87</td>\n","      <td>NaN</td>\n","      <td>Sicily &amp; Sardinia</td>\n","      <td>Etna</td>\n","      <td>NaN</td>\n","      <td>Kerin O’Keefe</td>\n","      <td>@kerinokeefe</td>\n","      <td>Nicosia 2013 Vulkà Bianco  (Etna)</td>\n","      <td>White Blend</td>\n","      <td>Nicosia</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Portugal</td>\n","      <td>This is ripe and fruity, a wine that is smooth...</td>\n","      <td>Avidagos</td>\n","      <td>87</td>\n","      <td>15.0</td>\n","      <td>Douro</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Roger Voss</td>\n","      <td>@vossroger</td>\n","      <td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td>\n","      <td>Portuguese Red</td>\n","      <td>Quinta dos Avidagos</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>US</td>\n","      <td>Tart and snappy, the flavors of lime flesh and...</td>\n","      <td>NaN</td>\n","      <td>87</td>\n","      <td>14.0</td>\n","      <td>Oregon</td>\n","      <td>Willamette Valley</td>\n","      <td>Willamette Valley</td>\n","      <td>Paul Gregutt</td>\n","      <td>@paulgwine</td>\n","      <td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td>\n","      <td>Pinot Gris</td>\n","      <td>Rainstorm</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>US</td>\n","      <td>Pineapple rind, lemon pith and orange blossom ...</td>\n","      <td>Reserve Late Harvest</td>\n","      <td>87</td>\n","      <td>13.0</td>\n","      <td>Michigan</td>\n","      <td>Lake Michigan Shore</td>\n","      <td>NaN</td>\n","      <td>Alexander Peartree</td>\n","      <td>NaN</td>\n","      <td>St. Julian 2013 Reserve Late Harvest Riesling ...</td>\n","      <td>Riesling</td>\n","      <td>St. Julian</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>US</td>\n","      <td>Much like the regular bottling from 2012, this...</td>\n","      <td>Vintner's Reserve Wild Child Block</td>\n","      <td>87</td>\n","      <td>65.0</td>\n","      <td>Oregon</td>\n","      <td>Willamette Valley</td>\n","      <td>Willamette Valley</td>\n","      <td>Paul Gregutt</td>\n","      <td>@paulgwine</td>\n","      <td>Sweet Cheeks 2012 Vintner's Reserve Wild Child...</td>\n","      <td>Pinot Noir</td>\n","      <td>Sweet Cheeks</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca732c4c-5a53-4a12-917d-e1026fa82bea')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ca732c4c-5a53-4a12-917d-e1026fa82bea button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ca732c4c-5a53-4a12-917d-e1026fa82bea');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-425f2120-3d8e-48fe-a054-437124615497\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-425f2120-3d8e-48fe-a054-437124615497')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-425f2120-3d8e-48fe-a054-437124615497 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"reviews"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["# Exercises"],"metadata":{"id":"OyvmnQzCtg4r"}},{"cell_type":"markdown","source":["## 1.\n","\n","What is the median of the `points` column in the `reviews` DataFrame?"],"metadata":{"id":"ZF9bIDrttg4t"}},{"cell_type":"code","source":["median_points = reviews[\"points\"].median()\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T12:15:14.302037Z","iopub.execute_input":"2024-02-15T12:15:14.302551Z","iopub.status.idle":"2024-02-15T12:15:14.316124Z","shell.execute_reply.started":"2024-02-15T12:15:14.302513Z","shell.execute_reply":"2024-02-15T12:15:14.314909Z"},"trusted":true,"id":"CzeyFM9ntg4t","executionInfo":{"status":"ok","timestamp":1708184310543,"user_tz":-180,"elapsed":286,"user":{"displayName":"Halit Ince","userId":"10018985644071223184"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## 2.\n","What countries are represented in the dataset? (Your answer should not include any duplicates.)"],"metadata":{"id":"dCFWxzAntg4v"}},{"cell_type":"code","source":["countries = reviews[\"country\"].unique()\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T12:15:50.085075Z","iopub.execute_input":"2024-02-15T12:15:50.085729Z","iopub.status.idle":"2024-02-15T12:15:50.120807Z","shell.execute_reply.started":"2024-02-15T12:15:50.08568Z","shell.execute_reply":"2024-02-15T12:15:50.119489Z"},"trusted":true,"id":"r70uBKdttg4w","outputId":"3756eca6-4c6b-4405-de34-0d43d04a3fc8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.14285714285714285, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"2_UniqueCountries\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":["## 3.\n","How often does each country appear in the dataset? Create a Series `reviews_per_country` mapping countries to the count of reviews of wines from that country."],"metadata":{"id":"xLSwM_ZJtg4x"}},{"cell_type":"code","source":["reviews_per_country = reviews[\"country\"].value_counts()\n","\n","reviews_per_country.plot()"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T12:16:26.904709Z","iopub.execute_input":"2024-02-15T12:16:26.905114Z","iopub.status.idle":"2024-02-15T12:16:27.201795Z","shell.execute_reply.started":"2024-02-15T12:16:26.905084Z","shell.execute_reply":"2024-02-15T12:16:27.200603Z"},"trusted":true,"id":"rE-kVNLqtg4y","outputId":"25eeec0a-bea2-49b3-9e8a-2766bc2cf1cd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.14285714285714285, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"3_ReviewsPerCountry\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='country'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":["## 4.\n","Create variable `centered_price` containing a version of the `price` column with the mean price subtracted.\n","\n","(Note: this 'centering' transformation is a common preprocessing step before applying various machine learning algorithms.)"],"metadata":{"id":"uqSooZFKtg4z"}},{"cell_type":"code","source":["centered_price = reviews[\"price\"] - reviews[\"price\"].mean()\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T12:31:25.580148Z","iopub.execute_input":"2024-02-15T12:31:25.581089Z","iopub.status.idle":"2024-02-15T12:31:25.595619Z","shell.execute_reply.started":"2024-02-15T12:31:25.581051Z","shell.execute_reply":"2024-02-15T12:31:25.593907Z"},"trusted":true,"id":"SB-C-4Gntg4z","outputId":"03de08f4-3e8c-4260-d226-4dd0b7f3565d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.14285714285714285, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"4_CenteredPrice\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":["## 5.\n","I'm an economical wine buyer. Which wine is the \"best bargain\"? Create a variable `bargain_wine` with the title of the wine with the highest points-to-price ratio in the dataset."],"metadata":{"id":"CdmMGuCXtg40"}},{"cell_type":"code","source":["bargain_idx = (reviews.points / reviews.price).idxmax()\n","\n","print(bargain_idx)\n","\n","bargain_wine = reviews.loc[bargain_idx, 'title']\n","\n","print(bargain_wine)\n","\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T12:34:01.999493Z","iopub.execute_input":"2024-02-15T12:34:02.000068Z","iopub.status.idle":"2024-02-15T12:34:02.020779Z","shell.execute_reply.started":"2024-02-15T12:34:02.000028Z","shell.execute_reply":"2024-02-15T12:34:02.019341Z"},"trusted":true,"id":"W2bIZVq8tg41","outputId":"b0264945-3510-4b2f-a004-8cc50e860d38"},"execution_count":null,"outputs":[{"name":"stdout","text":"64590\nBandit NV Merlot (California)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.14285714285714285, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"5_BargainWine\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":["## 6.\n","There are only so many words you can use when describing a bottle of wine. Is a wine more likely to be \"tropical\" or \"fruity\"? Create a Series `descriptor_counts` counting how many times each of these two words appears in the `description` column in the dataset. (For simplicity, let's ignore the capitalized versions of these words.)"],"metadata":{"id":"w4Rpzg9mtg41"}},{"cell_type":"code","source":["descriptor_counts = {\"tropical\":0, \"fruity\":0}\n","\n","#print(reviews[\"description\"].head())\n","#print(reviews[\"description\"].map(lambda x: \"fruit\" in x))\n","\n","\n","\n","for search in [\"tropical\", \"fruity\"]:\n","    for x in reviews[\"description\"]:\n","        if search in x:\n","            descriptor_counts[search] += 1\n","\n","\n","descriptor_counts = pd.Series(descriptor_counts)\n","print(descriptor_counts)\n","\n","n_trop = reviews.description.map(lambda desc: \"tropical\" in desc).sum()\n","n_fruity = reviews.description.map(lambda desc: \"fruity\" in desc).sum()\n","descriptor_counts2 = pd.Series([n_trop, n_fruity], index=['tropical', 'fruity'])\n","\n","print()\n","print(descriptor_counts2)\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:05:28.245276Z","iopub.execute_input":"2024-02-15T13:05:28.245714Z","iopub.status.idle":"2024-02-15T13:05:28.590796Z","shell.execute_reply.started":"2024-02-15T13:05:28.245683Z","shell.execute_reply":"2024-02-15T13:05:28.589573Z"},"trusted":true,"id":"Z07r0CJptg42","outputId":"bfa09149-6941-4e8f-cd41-784b997f5a2f"},"execution_count":null,"outputs":[{"name":"stdout","text":"tropical    3607\nfruity      9090\ndtype: int64\n\ntropical    3607\nfruity      9090\ndtype: int64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.14285714285714285, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"6_DescriptorCounts\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":["## 7.\n","We'd like to host these wine reviews on our website, but a rating system ranging from 80 to 100 points is too hard to understand - we'd like to translate them into simple star ratings. A score of 95 or higher counts as 3 stars, a score of at least 85 but less than 95 is 2 stars. Any other score is 1 star.\n","\n","Also, the Canadian Vintners Association bought a lot of ads on the site, so any wines from Canada should automatically get 3 stars, regardless of points.\n","\n","Create a series `star_ratings` with the number of stars corresponding to each review in the dataset."],"metadata":{"id":"-tEEmpBLtg42"}},{"cell_type":"code","source":["\"\"\"\n","star_ratings = reviews[\"points\"].copy()\n","for i in range(len(reviews[\"points\"])):\n","    if reviews.loc[i,\"points\"] >= 95 or reviews.loc[i,\"country\"] == \"Canada\":\n","        star_ratings[i] = 3\n","    elif reviews.loc[i,\"points\"] >= 85 :\n","        star_ratings[i] = 2\n","    else:\n","        star_ratings[i] = 1\n","\"\"\"\n","\n","def stars(row):\n","    if row.points >= 95 or row.country == \"Canada\":\n","        return 3\n","    elif row.points >= 85:\n","        return 2\n","    return 1\n","\n","star_ratings = reviews.apply(stars, axis=\"columns\")\n","\n","\n","print(star_ratings)\n","\n"],"metadata":{"execution":{"iopub.status.busy":"2024-02-15T13:23:19.293446Z","iopub.execute_input":"2024-02-15T13:23:19.293906Z","iopub.status.idle":"2024-02-15T13:23:24.583103Z","shell.execute_reply.started":"2024-02-15T13:23:19.293873Z","shell.execute_reply":"2024-02-15T13:23:24.581808Z"},"trusted":true,"id":"Ibi7e6M6tg43","outputId":"f9970576-a870-4fe3-91b4-599524434d24"},"execution_count":null,"outputs":[{"name":"stdout","text":"0         2\n1         2\n         ..\n129969    2\n129970    2\nLength: 129971, dtype: int64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.14285714285714285, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"7_StarRatings\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]}]}